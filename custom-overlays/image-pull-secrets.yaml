#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#! Currently ytt does not allow overlaying maps on top of nils;
#! remove nil annotations before further overlays (https://github.com/k14s/ytt/issues/108)
#@overlay/match by=overlay.subset({"metadata":{"annotations": None}}),expects="1+"
---
metadata:
  #@overlay/remove
  annotations:

#! Add image pull secret to all service accounts and give them a dedicated kapp order group
#@overlay/match by=overlay.subset({"kind": "ServiceAccount"}),expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-group: tas.vmware.io/service-accounts
#@overlay/match missing_ok=True
imagePullSecrets:
- name: system-registry-credentials

#@ all_namespaces = [data.values.system_namespace, data.values.workloads_namespace,
#@   "cf-db", "cf-blobstore", "metacontroller", "kpack", "istio-system", "cf-workloads-staging",
#@   "build-service" ]

#@ for ns in all_namespaces:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: #@ ns
  annotations:
    #! Default service accounts are created automatically by kubernetes;
    #! need to fallback-on-update to avoid race condition between kapp and k8s
    kapp.k14s.io/create-strategy: fallback-on-update
---
apiVersion: v1
kind: Secret
metadata:
  name: system-registry-credentials
  namespace: #@ ns
type: kubernetes.io/dockerconfigjson
data:
  #@ data.values.system_registry.hostname or assert.fail("Expected non-empty data value system_registry.hostname")
  #@ data.values.system_registry.username or assert.fail("Expected non-empty data value system_registry.username")
  #@ data.values.system_registry.password or assert.fail("Expected non-empty data value system_registry.password")

  #@ docker_auth = base64.encode("{}:{}".format(data.values.system_registry.username, data.values.system_registry.password))
  #@ docker_creds = {"username": data.values.system_registry.username, "password": data.values.system_registry.password, "auth": docker_auth}
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.system_registry.hostname: docker_creds}}))

#! Create/update namespaced resources that are not service accounts after updating service accounts;
#! otherwise created Pods may not pick up image pull secrets, hence fail to pull images.

#@ not_sa = overlay.not_op(overlay.subset({"kind": "ServiceAccount"}))
#@ inside_ns = overlay.subset({"metadata": {"namespace": ns}})
#@overlay/match by=overlay.and_op(not_sa, inside_ns),expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-rule.service-account-dep: "upsert after upserting tas.vmware.io/service-accounts"
#@ end

#! Logging team hard coded image pull secret; remove it so that
#! service account's image pull secrets are used
#! (https://github.com/cloudfoundry/cf-k8s-logging/issues/16)
#@overlay/match by=overlay.subset({"kind":"DaemonSet", "metadata":{"name":"fluentd"}})
---
spec:
  template:
    spec:
      #@overlay/remove
      imagePullSecrets:

#@overlay/match by=overlay.subset({"kind":"Builder"})
---
spec:
  #@overlay/match missing_ok=True
  imagePullSecrets:
    - name: system-registry-credentials
